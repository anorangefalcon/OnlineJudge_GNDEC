<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Online Judge</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <link rel="stylesheet" href="styles/style.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@500&display=swap" rel="stylesheet">
</head>

<body>
    <nav class="navbar navbar-expand-md navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="home.html"><img src="/images/logo.png" width="45px"
                    alt="logo">&nbsp;&nbsp;Online Judge</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" aria-current="page" href="home.html">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="index.html">IDE</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="contests.html">Contests</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                          <span id="userId"> <%= user %></span>
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="userDropdown">
                          <li><a class="dropdown-item" href="/logout" id="signOutBtn">Sign-Out</a></li>
                        </ul>
                      </li>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container-fluid p-0">
        <div class="row">
            <section class="col-lg-6 text-center">
                <!-- <div style="padding: 30px 20px 15px 29px"  align="justify" >Lorem ipsum dolor, sit amet consectetur adipisicing elit. Cupiditate accusamus dolorum explicabo, quisquam autem alias aliquid molestias iusto vel consequatur veniam temporibus sapiente eius expedita dolorem minima provident aliquam corrupti.</div> -->
                <div class="text-start p-5">
                    <h2>Maximum product of indexes of next greater on Left & Right.</h2>
                    <!-- <h6>ID: #1_maths</h6> -->
                    <div><code>Hard
                    </code></div>
                    <br>
                    Given an array a[1..N]. For each element at position i (1 <= i <=N). Where L(i) is defined as
                        closest index j such that j < i and a[j]> a[i]. If no such j exists then L(i) = 0.
                        R(i) is defined as closest index k such that k > i and a[k] > a[i]. If no such k exists then
                        R(i) = 0.
                        LRProduct(i) = L(i)*R(i) .
                        We need to find an index with maximum LRProduct. <br><br>
                        For Example:

                        </code></p>
                        <p>Input : <code>1 1 1 1 0 1 1 1 1 1</code> <br>Output : <code> 24 </code> <br> 
                        Explaination : <code>For {1, 1, 1, 1, 0, 1, 1, 1, 1, 1} all element are same except 0. 
                        So only for zero their exist greater element and for others it will be zero. 
                        For zero, on left 4th element is closest and greater than zero and on right 6th element is closest and greater. 
                        So maximum product will be 4*6 = 24.</code><br><br>

                        Input : <code>5 4 3 4 5 </code><br>Output: <code>8</code>
                        <br>
                        Explaination : 
                        <code>
                        For {5, 4, 3, 4, 5}, L[] = {0, 1, 2, 1, 0} and R[] = {0, 5, 4, 5, 0}, 
                        LRProduct = {0, 5, 8, 5, 0} and max in this is 8.  
                        </code>
                        </p>
                        <p>Tags : Arrays, DSA, Stack</p>
                </div>
            </section>

            <section class="col-lg-6 m-0 p-0">
                <div class="control-panel panel panel-default">
                    <!--theme -->

                    <button class="theme-toggle-button">
                        <svg class="icon" style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path fill="currentColor"
                                d="M7.5,2C5.71,3.15 4.5,5.18 4.5,7.5C4.5,9.82 5.71,11.85 7.53,13C4.46,13 2,10.54 2,7.5A5.5,5.5 0 0,1 7.5,2M19.07,3.5L20.5,4.93L4.93,20.5L3.5,19.07L19.07,3.5M12.89,5.93L11.41,5L9.97,6L10.39,4.3L9,3.24L10.75,3.12L11.33,1.47L12,3.1L13.73,3.13L12.38,4.26L12.89,5.93M9.59,9.54L8.43,8.81L7.31,9.59L7.65,8.27L6.56,7.44L7.92,7.35L8.37,6.06L8.88,7.33L10.24,7.36L9.19,8.23L9.59,9.54M19,13.5A5.5,5.5 0 0,1 13.5,19C12.28,19 11.15,18.6 10.24,17.93L17.93,10.24C18.6,11.15 19,12.28 19,13.5M14.6,20.08L17.37,18.93L17.13,22.28L14.6,20.08M18.93,17.38L20.08,14.61L22.28,17.15L18.93,17.38M20.08,12.42L18.94,9.64L22.28,9.88L20.08,12.42M9.63,18.93L12.4,20.08L9.87,22.27L9.63,18.93Z" />
                        </svg>
                    </button>
                    <div class="sun-moon-container">
                        <svg class="sun" style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path
                                d="M3.55,18.54L4.96,19.95L6.76,18.16L5.34,16.74M11,22.45C11.32,22.45 13,22.45 13,22.45V19.5H11M12,5.5A6,6 0 0,0 6,11.5A6,6 0 0,0 12,17.5A6,6 0 0,0 18,11.5C18,8.18 15.31,5.5 12,5.5M20,12.5H23V10.5H20M17.24,18.16L19.04,19.95L20.45,18.54L18.66,16.74M20.45,4.46L19.04,3.05L17.24,4.84L18.66,6.26M13,0.55H11V3.5H13M4,10.5H1V12.5H4M6.76,4.84L4.96,3.05L3.55,4.46L5.34,6.26L6.76,4.84Z" />
                        </svg>

                        <svg class="moon" style="width:24px;height:24px" viewBox="0 0 24 24">
                            <path
                                d="M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.64 6.35,17.66C9.37,20.67 14.19,20.78 17.33,17.97Z" />
                        </svg>
                    </div>

                    <label for="languages" style="font-weight: bold;">
                        Language :
                      </label>
                      &nbsp;
                      <select id="languages" class="languages" name ="languages" onchange="changeLanguage()">
                        <option value="c"> C </option>
                        <option value="cpp"> C++ </option>
                        <option value="java"> Java </option>  
                        <option value="python"> Python </option>
                      </select>
                      &nbsp;&nbsp;

                </div>
                <div class="editor" id="editor"></div>

                <div class="button-container">
                    <span class="text_output" id="text_output">OUTPUT:</span>
                    <span>
                        <!-- <button class="btn btn-secondary submit_btn" onclick="clearTerminal()">Clear</button> -->
                        <button class="btn btn-primary submit_btn" onclick="customInput()">Custom Input</button>
                        <button class="btn btn-success submit_btn" onclick="executeCode(false, '6', '1')">RUN</button>
                        <button class="btn btn-success submit_btn" onclick="executeCode(true, '6', '1')">SUBMIT</button>
                    </span>
                </div>

                <div class="output">
                    <form id="inputArea" class="d-none">
                        <textarea class="inputArea" placeholder="Enter your Custom Input" id="customInput"></textarea>
                    </form>
                    <div id="terminal"></div>
                </div>
            </section>

        </div>
    </main>
    <script src="js/lib/ace.js"></script>
    <!-- <script src="js/lib/theme-monokai.js"></script> -->
    <script src="js/ide.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>
</body>

</html>

<!-- #include <iostream>
#include <stack>
using namespace std;

stack<int> mystack;

// To find greater element to left
void nextGreaterToLeft(int arr[], int res[], int N) {
    mystack.push(0);
    res[0] = 0;

    // iterate through the array
    for (int i = 1; i < N; i++) {
        while (mystack.size() > 0 && arr[mystack.top()] <= arr[i])
            mystack.pop();

        // place the index to the left in the resultant array
        res[i] = (mystack.size() == 0) ? 0 : mystack.top() + 1;
        mystack.push(i);
    }
}

//// To find greater element to right
void nextGreaterToRight(int arr[], int res[], int N) {
    mystack = stack<int>();

    int n = N;
    mystack.push(n - 1);
    res[n - 1] = 0;

    // iterate through the array in reverse order
    for (int i = n - 2; i >= 0; i--) {
        while (mystack.size() > 0 && arr[mystack.top()] <= arr[i])
            mystack.pop();

        // multiply the index to the right with the index to the left
        // in the resultant array
        res[i] = (mystack.size() == 0) ? res[i] * 0 : res[i] * (mystack.top() + 1);
        mystack.push(i);
    }
}

// function to return the max value in the resultant array
int maxProduct(int arr[], int res[], int N) {
    nextGreaterToLeft(arr, res, N);     // to find left max
    nextGreaterToRight(arr, res, N);    // to find right max

    int Max = res[0];
    for (int i = 1; i < N; i++) {
        Max = max(Max, res[i]);
    }
    return Max;
}

int main() {
    int size;
    cin >> size;
    int arr[size];
    for (int i = 0; i < size; ++i) {
        cin >> arr[i];
    }

    int res[size];
    int maxprod = maxProduct(arr, res, size);
    cout << maxprod;

    return 0;
} -->